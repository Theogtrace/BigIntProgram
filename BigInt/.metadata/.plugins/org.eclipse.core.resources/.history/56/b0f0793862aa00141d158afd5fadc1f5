
public class BigInt {
	   private int digit[];         // represent the integer as an array of digits
	   private int size;            // number of digits in the integer
	   private final int max = 50;  // maximum number of digits in the integer
	public BigInt()
	{     // default constructor
	    size = 50;
	    digit = new int[max];
	    digit[0] = 0;
	}
	// constructor with initial String value
	public BigInt(String num)
	{  
	  size = num.length();
	  digit = new int[max];
	  for (int ct = size - 1; ct >= 0; ct --)
	  {
	    digit[ct] = Integer.parseInt(num.substring(size - ct - 1, size - ct));
	  }
	}
	// constructor with initial integer value  
	public BigInt(int num)
	{  
	  size = Integer.toString(num).length();
	  digit = new int[max];
	  int rem = num;
	  for ( int ct = 0; ct <= size - 1; ct++)
	  {
	  digit[ct] = rem % 10;
	  rem = rem / 10;
	  }
	}
	// copy constructor
	public BigInt(BigInt num)
	{  
	  BigInt copy = new BigInt();//Create copy object
	  copy.size = this.size;//declare and initialize with BigInt nums size
	  for(int i = 0; i < this.size; i++)//copy the digits in each index
	    copy.digit[i] = this.digit[i];
	}
	// override Object’s version
	public String toString()
	{
	  String intString = "";
	  for (int ct = size - 1; ct >= 0; ct --)
	  {
	    intString = intString + String.valueOf(digit[ct]);
	  }
	  return intString;
	}

	public int compareTo(BigInt other)
	{
	  int compare = 0;
	  int stop = 0;
	  if(this.size > other.size)
	  {
	    stop = this.size;
	  }
	  else
	  {
	  stop = other.size;
	  }
	 
	  if(this.size > other.size)
	  {
	    compare = 1;// return  1 if this greater than other
	  }
	  else if(this.size < other.size)
	  {
	    compare = -1;// return -1 if this less than other
	  }
	  else if(this.size == other.size)
	  { // return  0 if both equal
	    for(int i = 0; i <= stop;i++)
	    {
	      if(this.digit[i] > other.digit[i])
	      {
	        compare = 1;
	      }
	      else if (this.digit[i] < other.digit[i])
	      {
	        compare = -1;
	      }
	      else  
	       continue;
	    }
	  }
	  else
	  {
	    compare = 0;
	  }
	 
	  return compare;                                                                  
	}
	 
	// add two BigInt’s
	public BigInt add(BigInt other)
	{
	  BigInt sum = new BigInt();//Create sum object
	  //declare and intialize carry
	  int carry = 0;
	  int i, temp;
	//change size of sum
	  if(this.size > other.size)
	    sum.size = this.size;
	  else
	    sum.size = other.size;


	  //add two BigInts
	  for(i = 0; i <= sum.size - 1; i++)
	  {
	    temp = this.digit[i] + other.digit[i] + carry;
	    //System.out.println(i + " Temp is " + temp);
	    sum.digit[i] = temp % 10;
	    carry = temp / 10;
	    //System.out.println(i + "Carry is " + carry);
	    //System.out.println("sum.digit[" + i +"] is " + sum.digit[i]);
	  }
	  if (carry != 0)
	  {
	    sum.digit[sum.size] = carry;
	    sum.size++;          
	  }                  
	  return sum;
	}


	// multiply two BigInts
	public BigInt mul(BigInt other)
	{
	  //Declare i and initialize carry
	  int i,j, count, temp, addZero;
	  int carry = 0;
	//create product object
	  BigInt answer = new BigInt();
	  answer.size = 0;
	 
	//set size of product
	  int intervals = this.size * other.size;
	 
	  BigInt ans[] = new BigInt[this.size];
	  for(i = 0; i < this.size; i++)
	  {
	     ans[i] = new BigInt();
	     ans[i].size = 0;
	  }
	//Loops to run through elements of array and multiply
	  i= 0;
	  count = 0;
	  while(count <= intervals - 1)
	  {
	   
	    // add 0's
	    for(addZero = 0; addZero < i; addZero++)
	    {
	        ans[i].digit[addZero] = 0;  
	        ans[i].size++;      
	    }
	   
	    for(j = 0; j <= (other.size-1); j++)
	    {
	      temp = this.digit[i] * other.digit[j] + carry;
	      ans[i].digit[j+addZero] = temp%10;
	      carry = temp / 10;
	      //System.out.println(i + " Temp is " + temp);
	      //System.out.println(i + " carry is " + carry);
	      //System.out.println("sum.digit[" + i +"] is " + product.digit[i]);
	     
	      ans[i].size++;
	      count++;
	    }
	    i++;
	  }
	     
	  if (carry != 0)
	  {
	    ans[i-1].digit[ans[i-1].size] = carry;
	    ans[i-1].size++;          
	  }                
	     
	  for(int addAll = 0; addAll < i; addAll++)
	  {
	    answer = answer.add(ans[addAll]);        
	  }
	 
	  return answer;
	 
	}
	   //private void times10() { // I found this useful, but you might not.
	                          // Not required, but if you do write it be careful
	                            // since it changes the BigInt. You might prefer  
	                            // writing a version that creates a new BigInt
	   
	//}
	    public void inc(BigInt num)
	    {
	        int carry = 0;
	        num.digit[size] = num.digit[size] + 1;
	   
	        if(num.digit[size] > 9)
	        {
	        num.digit[size] = num.digit[size] % 10;
	        carry = num.digit[size] / 10;
	        num.size++;
	        }
	   
	        if(carry != 0)
	        {
	        num.digit[size + 1] = num.digit[size + 1] + carry;
	        }
	    }}

